const child_process = require('child_process')
const fs = require('fs')
const loaderUtils = require('loader-utils')
const toml = require('toml')
const path = require('path')
const bootstrap = fs.readFileSync(__dirname + '/output.js', 'utf8');

module.exports = function(source) {
  // Indicate that this loader is asynchronous
  const callback = this.async()
  const srcDir = path.dirname(path.dirname(this.resourcePath))
  // Find the rust package name in the Cargo.toml
  const packageName = toml.parse(
    fs.readFileSync(path.join(srcDir, 'Cargo.toml'), 'utf8').toString()
  ).lib.name

  const opts = loaderUtils.getOptions(this)
  const release = opts ? opts.release : false

  const buildPath = opts ? opts.path : undefined
  if (buildPath === undefined) {
    return callback(
      new Error(
        'You must set the `path` option to the path to webpack output relative to project root'
      ),
      null
    )
  }

  const rustTarget = `wasm32-unknown-unknown`

  const outDir = path.join(
    srcDir,
    'target',
    rustTarget,
    release ? 'release' : 'debug'
  )
  const outFile = path.join(outDir, `${packageName}.wasm`)
  const cmd = `cargo build --target=${rustTarget}${release ? ' --release' : ''}`
  const self = this
  child_process.exec(cmd, { cwd: this.context }, function(
    error,
    stdout,
    stderr
  ) {
    if (error) {
      callback(error, null)
    }

    // Get the contents of the javascript 'glue' code generated by Emscripten
    const buffer = fs.readFileSync(outFile);

    var out = "var buffer = new ArrayBuffer(" + buffer.length + ");";
    out += "var uint8 = new Uint8Array(buffer);";
    out += "uint8.set([";
    for(var i = 0; i < buffer.length; i++) {
      out += buffer[i] + ","
    }
    out += "]);"
    out += bootstrap;

    callback(null, out);
  })
}

module.exports.raw = true;

